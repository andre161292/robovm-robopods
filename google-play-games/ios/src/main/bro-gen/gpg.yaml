package: org.robovm.pods.google.games
framework: gpg
include: 
    - ../../../../../../robovm/cocoatouch/src/main/bro-gen/foundation.yaml
    - ../../../../../../robovm/cocoatouch/src/main/bro-gen/uikit.yaml
    - ../../../../../../robovm/cocoatouch/src/main/bro-gen/coregraphics.yaml
clang_args: ['-x', 'objective-c']
header_root: '/'
headers:
    - gpg.framework/Headers/GooglePlayGames.h
typedefs:
    GPGAchievementDidUnlockBlock: '@Block GPGAchievementUnlockCallback'
    GPGAchievementDidIncrementBlock: '@Block GPGAchievementIncrementStepsCallback'
    GPGAchievementDidSetStepsBlock: '@Block GPGAchievementSetStepsCallback'
    GPGAchievementDidRevealBlock: '@Block GPGAchievementRevealCallback'
    GPGAchievementDidResetBlock: '@Block GPGAchievementResetCallback'
    GPGAllAchievementsDidResetBlock: '@Block GPGAchievementResetAllCallback'
    GPGAchievementMetadataBlock: '@Block GPGAchievementMetadataGetCallback'
    GPGAchievementAllMetadataBlock: '@Block GPGAchievementMetadataGetAllCallback'
    GPGEventListBlock: '@Block GPGEventGetAllCallback'
    GPGEventOperationBlock: '@Block GPGEventOperationCallback'
    GPGLeaderboardLoadScoresBlock: '@Block GPGLeaderboardLoadScoresCallback'
    GPGScoreResetBlock: '@Block GPGLeaderboardScoreResetCallback'
    GPGLeaderboardAllMetadataBlock: '@Block GPGLeaderboardMetadataGetAllCallback'
    GPGLeaderboardMetadataBlock: '@Block GPGLeaderboardMetadataGetCallback'
    GPGReAuthenticationBlock: '@Block GPGManagerReAuthenticationCallback'
    GPGRevisionCheckBlock: '@Block GPGManagerRevisionCheckCallback'
    GPGPlayerGetBlock: '@Block GPGPlayerGetCallback'
    GPGPlayersGetBlock: '@Block GPGPlayerGetMultipleCallback'
    GPGQuestFetchBlock: '@Block GPGQuestGetCallback'
    GPGQuestListBlock: '@Block GPGQuestGetAllCallback'
    GPGQuestCompletionBlock: '@Block GPGQuestCompletionCallback'
    GPGRealTimeParticipantIterator: '@Block GPGRealTimeParticipantIterator'
    GPGListRoomsHandler: '@Block GPGRoomGetAllCallback'
    GPGRoomRequestHandler: '@Block GPGRoomRequestCallback'
    GPGRoomDismissHandler: '@Block GPGRoomDismissCallback'
    GPGScoreReportScoreBlock: '@Block GPGScoreReportCallback'
    GPGSnapshotListBlock: '@Block GPGSnapshotMetadataGetAllCallback'
    GPGSnapshotOpenBlock: '@Block GPGSnapshotMetadataOpenCallback'
    GPGSnapshotReadBlock: '@Block GPGSnapshotMetadataReadCallback'
    GPGSnapshotDeleteBlock: '@Block GPGSnapshotMetadataDeleteCallback'
    GPGSnapshotCommitBlock: '@Block GPGSnapshotMetadataCommitCallback'
    GPGTurnBasedMatchCreateBlock: '@Block GPGTurnBasedMatchCreateCallback'
    GPGTurnBasedMatchGetBlock: '@Block GPGTurnBasedMatchGetCallback'
    GPGTurnBasedMatchesBlock: '@Block GPGTurnBasedMatchGetMultipleCallback'
    GPGTurnBasedMatchListBlock: '@Block GPGTurnBasedMatchGetListCallback'
    GPGTurnBasedMatchRematchBlock: '@Block GPGTurnBasedMatchRematchCallback'
    GPGTurnBasedMatchCompletionBlock: '@Block GPGTurnBasedMatchCompletionCallback'
    
enums:
    GPGErrorCode: {first: GPGInvalidAuthenticationError, suffix: Error}
    GPGDataSource: {first: GPGDataSourceCacheOrNetwork}
    GPGLauncherType: {}
    GPGAchievementType: {}
    GPGAchievementState: {}
    GPGLeaderboardTimeScope: {}
    GPGLeaderboardOrder: {}
    GPGPushNotificationEnvironment: {}
    GPGToastPlacement: {}
    GPGRevisionStatus: {}
    GPGRealTimeRoomCreationResult: {}
    GPGRealTimeRoomStatus: {}
    GPGRealTimeParticipantStatus: {}
    GPGRealTimeDataMode: {}
    GPGTurnBasedMatchCreationResult: {}
    GPGTurnBasedParticipantStatus: {}
    GPGTurnBasedUserMatchStatus: {}
    GPGTurnBasedMatchStatus: {}
    GPGTurnBasedParticipantResultStatus: {}
    GPGQuestState: {}
    GPGQuestMilestoneState: {}
    GPGSnapshotConflictPolicy: {}
        
classes:
    GPGError:
        extends: NSError
        annotations: ['@StronglyLinked']
        
    GPGAchievement: # DONE
        methods:
            '-initWithAchievementId:':
                name: init
            '-unlockAchievementWithCompletionHandler:':
                name: unlock
            '-revealAchievementWithCompletionHandler:':
                name: reveal
            '-incrementAchievementNumSteps:completionHandler:':
                name: incrementSteps
            '-setSteps:completionHandler:':
                trim_after_first_colon: true
            '-resetAchievementWithCompletionHandler:':
                name: reset
            '+achievementWithId:':
                exclude: true
            '+resetAllAchievementsWithCompletionHandler:':
                name: resetAll
    GPGAchievementMetadata: # DONE
        methods:
            '+metadataForAchievementId:completionHandler:':
                name: getMetadata
            '+metadataForAchievementId:dataSource:completionHandler:':
                name: getMetadata
            '+allMetadataWithCompletionHandler:':
                name: getAllMetadata
            '+allMetadataFromDataSource:completionHandler:':
                name: getAllMetadata
    GPGEvent: # DONE
        methods:
            '-incrementBy:':
                trim_after_first_colon: true
            '-incrementWithCompletionHandler:':
                name: increment
            '-incrementBy:completionHandler:':
                trim_after_first_colon: true
            '+allEventsWithCompletionHandler:':
                name: getAllEvents
            '+eventForId:completionHandler:':
                name: getEvent
    GPGLauncherController: # DONE
        methods:
            '-presentTurnBasedMatchListWithMatches:':
                name: presentTurnBasedMatchList
                parameters:
                    matches:
                        type: NSArray<GPGTurnBasedMatch>
            '-presentQuestListWithQuestId:':
                name: presentQuestList
            '-presentLeaderboardWithLeaderboardId.*':
                name: presentLeaderboard
            '-presentRealTimeInvitesWithRoomDataList:':
                name: presentRealTimeInvites
                parameters:
                    roomDataList:
                        type: NSArray<GPGRealTimeRoomData>
            '-presentRealTimeInviteWithMinPlayers:maxPlayers:exclusiveBitMask:variant:':
                name: presentRealTimeInvite
            '-presentRealTimeInviteWithMinPlayers:maxPlayers:':
                name: presentRealTimeInvite
            '-presentRealTimeWaitingRoomWithConfig:':
                name: presentRealTimeWaitingRoom
            '-presentRealTimeWaitingRoomWithRoomData:':
                name: presentRealTimeWaitingRoom
            '-dismissAnimated:completionHandler:':
                name: dismiss
            '+sharedInstance':
                property: true
    GPGLeaderboard: # DONE
        properties:
            'scores':
                type: NSArray<GPGScore>
        methods:
            '-initWithLeaderboardId:':
                name: init
            '-loadScoresWithCompletionHandler:':
                name: loadScores
            '-loadScoresFromDataSource:completionHandler:':
                name: loadScores
            '-loadNextPageOfScoresWithCompletionHandler:':
                name: loadNextPageOfScores
            '-loadPreviousPageOfScoresWithCompletionHandler:':
                name: loadPreviousPageOfScores
            '-resetScoreWithCompletionHandler:':
                name: resetScore
            '+leaderboardWithId:':
                name: getLeaderboard
    GPGLeaderboardMetadata: # DONE
        methods:
            '+allMetadataWithCompletionHandler:':
                name: getAllMetadata
            '+allMetadataFromDataSource:completionHandler:':
                name: getAllMetadata
            '+metadataForLeaderboardId:completionHandler:':
                name: getMetadata
            '+metadataForLeaderboardId:dataSource:completionHandler:':
                name: getMetadata
    GPGLocalPlayerRank: {} # DONE
    GPGLocalPlayerScore: {} # DONE
    GPGManager: # DONE
        properties:
            'validOrientationFlags':
                exclude: true # deprecated
            'snapshotsEnabled':
                getter: areSnapshotsEnabled
        methods:
            '-(hasAuthorizer|signIn:reauthorizeHandler:)':
                exclude: true # deprecated
            '-signInWithClientID:silently:':
                name: signIn
            '-signInWithClientID:silently:withExtraScopes:':
                name: signIn
                parameters:
                    scopes:
                        type: List<String>
                        marshaler: NSArray.AsStringListMarshaler
            '-tryHandleRemoteNotification.*':
                trim_after_first_colon: true
                parameters:
                    userInfo:
                        type: UIRemoteNotification
            '-registerDeviceToken:forEnvironment:':
                trim_after_first_colon: true
            '-refreshRevisionStatus:':
                trim_after_first_colon: true
            '+sharedInstance':
                property: true
            '+registerForInteractiveGamesNotificationsWithType:':
                name: registerForInteractiveGamesNotifications
    GPGMultiplayerConfig: # DONE
        properties:
            'invitedPlayerIds':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
    GPGPlayer: # DONE
        methods:
            '+localPlayer.*':
                name: getLocalPlayer
            '+recentlyPlayedPlayers.*':
                name: getRecentlyPlayedPlayers
            '+connectedPlayers.*':
                name: getConnectedPlayers
    GPGPlayerLevel: {} # DONE
    GPGQuest: # DONE
        methods:
            '-acceptWithCompletionHandler:':
                name: accept
            '+fetchQuestWithId:completionHandler:':
                name: getQuest
            '+allQuestsWithCompletionHandler:':
                name: getAllQuests
            '+allQuestsFromDataSource:completionHandler:':
                name: getAllQuests
            '+questsForState:completionHandler:':
                name: getQuestsForState
    GPGQuestMilestone: # DONE
        methods:
            '-claimWithCompletionHandler:':
                name: claim
    GPGRealTimeRoomCreationHandle: {} # DONE
    GPGRealTimeRoomModifyDetails: {} # DONE
    GPGRealTimeReliableMessageResult: {} # DONE
    GPGRealTimeParticipant: # DONE
        methods:
            '-sendReliableData:':
                trim_after_first_colon: true
            '-sendUnreliableData:':
                trim_after_first_colon: true
    GPGRealTimeRoom: # DONE
        properties:
            '(participants|connectedParticipants)':
                type: NSArray<GPGRealTimeParticipant>
        methods:
            '-findParticipantById:':
                trim_after_first_colon: true
            '-enumerateParticipantsUsingBlock:':
                name: enumerateParticipants
            '-enumerateOtherParticipantsUsingBlock:':
                name: enumerateOtherParticipants
            '-enumerateConnectedParticipantsUsingBlock:':
                name: enumerateConnectedParticipants
            '-sendReliableData:toParticipants:':
                trim_after_first_colon: true
                parameters:
                    participants:
                        type: NSArray<GPGRealTimeParticipant>
            '-sendUnreliableData:toParticipants:':
                trim_after_first_colon: true
                parameters:
                    participants:
                        type: NSArray<GPGRealTimeParticipant>
            '-sendReliableData.*':
                trim_after_first_colon: true
            '-sendUnreliableData.*':
                trim_after_first_colon: true
    GPGRealTimeRoomData: # DONE
        properties:
            'participants':
                type: NSArray<GPGRealTimeParticipant>
    GPGRealTimeRoomMaker: # DONE
        methods:
            '+createRoomFromConfig:':
                name: createRoom
            '+createRoomFromConfig:operationHandle:':
                name: createRoom0
                visibility: protected
            '+joinRoomFromData:':
                name: joinRoom
            '+joinRoomFromData:operationHandle:':
                name: joinRoom0
                visibility: protected
            '+listRoomsWithMaxResults:completionHandler:':
                name: getAllRooms
            '+getRoom.*':
                name: getRoom
            '+declineRoomFromData:completionHandler:':
                name: declineRoom
            '+dismissRoomFromData:completionHandler:':
                name: dismissRoom
            '+activeRoom':
                property: true
    GPGScore: # DONE
        properties:
            '(avatarUrl|displayName|playerId)':
                exclude: true # deprecated
        methods:
            '+batchSubmitScores:withCompletionHandler:':
                exclude: true # deprecated
            '-initWithLeaderboardId:':
                name: init
            '-submitScoreWithCompletionHandler:':
                name: submitScore
            '+scoreWithLeaderboardId:':
                name: getScore
            '+batchSubmitScores:completionHandler:':
                trim_after_first_colon: true
                parameters:
                    scores:
                        type: NSArray<GPGScore>
    GPGScoreReport: {} # DONE
    GPGSnapshotMetadata: # DONE
        methods:
            '-commitWithMetadataChange:data:completionHandler:':
                name: commit
            '-resolveWithMetadataChange:conflictId:data:completionHandler:':
                name: resolve
            '-readWithCompletionHandler:':
                name: read
            '-deleteWithCompletionHandler:':
                name: delete
            '+listWithCompletionHandler:':
                name: getAll
            '+openWithFileName:conflictPolicy:completionHandler:':
                name: open
    GPGSnapshotMetadataChangeCoverImage: # DONE
        methods:
            '-initWithImage:':
                name: init
    GPGSnapshotMetadataChange: {} # DONE
    GPGTurnBasedMatch: # DONE
        properties:
            'participants':
                type: NSArray<GPGTurnBasedParticipant>
            'results':
                type: NSArray<GPGTurnBasedParticipantResult>
        methods:
            '-canParticipantTakeTurn:':
                trim_after_first_colon: true
            '-participantIdForPlayerId:':
                name: getParticipantIdForPlayerId
            '-participantForId:':
                name: findParticipantById
            '-resultForParticipantId:':
                name: getParticipantResult
            '-statusForPlayerId:':
                name: getPlayerStatus
            '-cancelWithCompletionHandler:':
                name: cancel
            '-declineWithCompletionHandler:':
                name: decline
            '-dismissWithCompletionHandler:':
                name: dismiss
            '-finishWithData:results:completionHandler:':
                name: finish
                parameters:
                    results:
                        type: NSArray<GPGTurnBasedParticipantResult>
            '-joinWithCompletionHandler:':
                name: join
            '-leaveOutOfTurnWithCompletionHandler:':
                name: leaveOutOfTurn
            '-leaveDuringTurnWithNextParticipantId:completionHandler:':
                name: leaveDuringTurn
            '-rematchWithCompletionHandler:':
                name: rematch
            '-takeTurnWithNextParticipantId:data:results:completionHandler:':
                name: takeTurn
                parameters:
                    results:
                        type: NSArray<GPGTurnBasedParticipantResult>
            '+createMatchWithConfig:completionHandler:':
                name: create
            '+fetchMatchWithId:includeMatchData:completionHandler:':
                name: getMatch
            '+listForIncludeMatchData:maxCompletedMatches:maxResults:pageToken:completionHandler:':
                name: getMatchList
            '+allMatches.*':
                name: getAllMatches
            '+matchesForMatchStatus.*':
                name: getMatchesForStatus
            '+matchesForUserMatchStatus.*':
                name: getMatchesForUserStatus
    GPGTurnBasedParticipant: {} # DONE
    GPGTurnBasedParticipantResult: # DONE
        methods:
            '-initWithParticipantId:':
                name: init

protocols:
    GPGLauncherDelegate: # DONE
        methods:
            '-presentingViewControllerForLauncher':
                exclude: true # deprecated
            '-launcherWillAppear':
                name: willAppear
            '-launcherDidAppear':
                name: didAppear
            '-launcherWillDisappear':
                name: willDisappear
            '-launcherDidDisappear':
                name: didDisappear
            '-launcherDismissed':
                name: dismissed
    GPGPlayerPickerLauncherDelegate: # DONE
        methods:
            '-minPlayersForPlayerPickerLauncher':
                name: getMinPlayers
            '-maxPlayersForPlayerPickerLauncher':
                name: getMaxPlayers
            '-playerPickerLauncherDidPickPlayers:autoPickPlayerCount:':
                name: didPickPlayers
                parameters:
                    players:
                        type: NSArray<GPGPlayer>
    GPGTurnBasedMatchListLauncherDelegate: # DONE
        methods:
            '-turnBasedMatchListLauncherDidJoinMatch:':
                name: didJoinMatch
            '-turnBasedMatchListLauncherDidSelectMatch:':
                name: didSelectMatch
            '-turnBasedMatchListLauncherDidRematch:':
                name: didRematch
            '-turnBasedMatchListLauncherDidDeclineMatch:':
                name: didDeclineMatch
    GPGQuestListLauncherDelegate: # DONE
        methods:
            '-questListLauncherDidAcceptQuest:':
                name: didAcceptQuest
            '-questListLauncherDidClaimRewardsForQuestMilestone:':
                name: didClaimRewards
            '-questListLauncherShouldShowQuest:':
                name: shouldShowQuest
    GPGSnapshotListLauncherDelegate: # DONE
        methods:
            '-snapshotListLauncherDidTapSnapshotMetadata:':
                name: didTapSnapshotMetadata
            '-snapshotListLauncherDidCreateNewSnapshot':
                name: didCreateNewSnapshot
            '-titleForSnapshotListLauncher':
                name: getTitle
            '-shouldAllowCreateForSnapshotListLauncher':
                name: shouldAllowCreate
            '-shouldAllowDeleteForSnapshotListLauncher':
                name: shouldAllowDelete
            '-maxSaveSlotsForSnapshotListLauncher':
                name: getMaxSaveSlots
    GPGStatusDelegate: # DONE
        methods:
            '-didFinishGamesSignInWithError:':
                name: didFinishGamesSignIn
            '-didFinishGamesSignOutWithError:':
                name: didFinishGamesSignOut
            '-didFinishGoogleAuthWithError:':
                name: didFinishGoogleAuth
            '-shouldReauthenticateWithError:':
                name: shouldReauthenticate
            '-willReauthenticate:':
                trim_after_first_colon: true 
            '-didDisconnectWithError:':
                name: didDisconnect
    GPGTurnBasedMatchDelegate: # DONE
        methods:
            '-didReceiveTurnBasedInviteForMatch:participant:fromPushNotification:':
                name: didReceiveTurnBasedInvite
            '-didReceiveTurnEventForMatch:participant:fromPushNotification:':
                name: didReceiveTurnEvent
            '-matchEnded:participant:fromPushNotification:':
                trim_after_first_colon: true
            '-failedToProcessMatchUpdate:error:':
                trim_after_first_colon: true
    GPGQuestDelegate: # DONE
        methods:
            '-didCompleteQuest:':
                name: didComplete
    GPGRealTimeRoomDelegate: # DONE
        methods:
            '-didAcceptRealTimeInviteForRoom:':
                name: didAcceptRealTimeInvite
            '-didDeclineRealTimeInviteForRoom:':
                name: didDeclineRealTimeInvite
            '-didReceiveRealTimeInviteForRoom:':
                name: didReceiveRealTimeInvite
            '-room:didChangeStatus:':
                name: didChangeStatus
            '-room:didChangeConnectedSet:':
                name: didChangeConnectedSet
            '-room:participant:didChangeStatus:':
                name: didChangeParticipantStatus
            '-room:didReceiveData:fromParticipant:dataMode:':
                name: didReceiveData
            '-room:didSendReliableId:results:':
                name: didSendReliableMessage
                parameters:
                    results:
                        type: NSArray<GPGRealTimeReliableMessageResult>
            '-room:didFailWithError:':
                name: didFail

functions:
    # Make sure we don't miss any functions if new ones are introduced in a later version
    (k?GPG.*):
        class: GooglePlayGames
        name: 'Function__#{g[0]}'

values:
    GPGErrorDomain:
        class: GPGError
        name: getClassDomain

    # GPGMultiplayerConfig
    kGPGMultiplayerVariant(.*):
        class: GPGMultiplayerConfig
        name: 'get#{g[0]}'

    # GPGRealTimeRoom
    kGPGRealTime((Min|Max)Players):
        class: GPGRealTimeRoom
        name: 'get#{g[0]}'
    kGPGRealTime(InvalidReliableSendId):
        class: GPGRealTimeRoom
        name: 'get#{g[0]}'

    # GPGTurnBasedMatch
    kGPGTurnBased((Min|Max)Players):
        class: GPGTurnBasedMatch
        name: 'get#{g[0]}'

    # GPGTurnBasedParticipantResult
    kGPGTurnBasedParticipantResultPlacingUninitialized:
        class: GPGTurnBasedParticipantResult
        name: getUninitializedPlacing

    # Make sure we don't miss any values if new ones are introduced in a later version
    (k?GPG.*):
        class: GooglePlayGames
        name: 'Value__#{g[0]}'

constants:
    # Make sure we don't miss any constants if new ones are introduced in a later version
    (k?GPG.*):
        class: GooglePlayGames
        name: 'Constant__#{g[0]}'
