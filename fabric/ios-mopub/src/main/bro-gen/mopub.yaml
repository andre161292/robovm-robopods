package: org.robovm.pods.fabric.mopub
framework: TwitterCore
include: 
    - ../../../../../../robovm/cocoatouch/src/main/bro-gen/foundation.yaml
    - ../../../../../../robovm/cocoatouch/src/main/bro-gen/coregraphics.yaml
    - ../../../../../../robovm/cocoatouch/src/main/bro-gen/corelocation.yaml
    - ../../../../../../robovm/cocoatouch/src/main/bro-gen/uikit.yaml
    
clang_args: ['-x', 'objective-c']
header_root: '/../robopods/META-INF/robovm/ios/libs/'
headers:
    - MoPub.framework/Headers/MoPub.h
typedefs:
private_typedefs:
    MPNativeAdRequestHandler: '@Block VoidBlock3<MPNativeAdRequest, MPNativeAd, NSError>'
    MPNativeViewSizeHandler: '@Block("(@MachineSizedFloat)") Block1<Double, CGSize>'
    
enums:
    MPNativeAdOrientation: {}
    MPNativeAdErrorCode: {}
    MPRewardedVideoErrorCode: {}

categories: {}
        
classes:
    MPNativeAdError:
        extends: NSError
        annotations: ['@StronglyLinked']

    MoPub: # DONE
        properties:
            'locationUpdatesEnabled':
                getter: areLocationUpdatesEnabled
        methods:
            '-initializeRewardedVideoWithGlobalMediationSettings:delegate:':
                name: init
            '-globalMediationSettingsForClass:':
                name: getGlobalMediationSettings
            '-(version|bundleIdentifier)':
                property: true
            '+sharedInstance':
                property: true
    MOPUBNativeVideoAdRenderer: # DONE
        methods:
            '+rendererConfigurationWithRendererSettings:':
                name: getRendererConfiguration
    MOPUBNativeVideoAdRendererSettings: # DONE
        properties:
            'renderingViewClass':
                type: 'Class<?>' #  extends UIView & MPNativeAdRendering
    MPAdConversionTracker: # DONE
        methods:
            '-reportApplicationOpenForApplicationID:':
                name: reportApplicationOpen
            '+sharedConversionTracker':
                property: true
    MPAdPositioning: # DONE
        properties:
            'fixedPositions':
                type: NSMutableOrderedSet<NSNumber>
    MPAdView: # DONE
        methods:
            '-initWithAdUnitId:size:':
                name: init
            '-rotateToOrientation:':
                name: rotate
            '-lockNativeAdsToOrientation:':
                name: lockNativeAdsOrientation
            '-allowedNativeAdsOrientation':
                property: true
            '-adContentViewSize':
                property: true
    MPBannerCustomEvent: # DONE
        methods:
            '-requestAdWithSize:customEventInfo:':
                name: requestAd
            '-rotateToOrientation:':
                name: rotate
    MPClientAdPositioning: # DONE
        methods:
            '-addFixedIndexPath:':
                trim_after_first_colon: true
            '-enableRepeatingPositionsWithInterval:':
                name: enableRepeatingPositions
            '+positioning':
                property: true
    MPCollectionViewAdPlacer: # DONE
        methods:
            '-loadAds.*':
                name: loadAds
            '+placerWith.*':
                name: create
                constructor: true
    MPInterstitialAdController: # DONE
        methods:
            '-showFromViewController:':
                name: show
            '+interstitialAdControllerForAdUnitId:':
                name: getInterstitialAdController
            '+removeSharedInterstitialAdController:':
                trim_after_first_colon: true
            '+sharedInterstitialAdControllers':
                property: true
                return_type: NSMutableArray<MPInterstitialAdController>
    MPInterstitialCustomEvent: # DONE
        methods:
            '-requestInterstitialWithCustomEventInfo:':
                name: requestInterstitial
            '-showInterstitialFromRootViewController:':
                name: showInterstitial
    MPNativeAd: # DONE
        methods:
            '-initWithAdAdapter:':
                name: init
            '-retrieveAdViewWithError:':
                name: retrieveAdView
                throws: NSErrorException
            '-trackMetricForURL:':
                name: trackMetric
    MPNativeAdRendererConfiguration: {} # DONE
    MPNativeAdRenderingImageLoader: # DONE
        methods:
            '-initWithImageHandler:':
                name: init
                parameters:
                    imageHandler:
                        type: NSObject # MPNativeAdRendererImageHandler ???
            '-loadImageForURL:intoImageView:':
                name: loadImage
    MPNativeAdRequest: # DONE
        methods:
            '-startWithCompletionHandler:':
                name: start
            '+requestWithAdUnitIdentifier:rendererConfigurations:':
                name: create
                constructor: true
                parameters:
                    rendererConfigurations:
                        type: NSArray<MPNativeAdRendererConfiguration>
    MPNativeAdRequestTargeting: # DONE
        methods:
            '+targeting':
                property: true
    MPNativeCustomEvent: # DONE
        methods:
            '-requestAdWithCustomEventInfo:':
                name: requestAd
            '-precacheImagesWithURLs:completionBlock:':
                name: precacheImages
                parameters:
                    imageURLs:
                        type: NSArray<NSURL>
                    completionBlock:
                        type: '@Block VoidBlock1<NSArray<NSError>>'
    MPRewardedVideo: # DONE
        methods:
            '+loadRewardedVideoAdWithAdUnitID:withMediationSettings:':
                name: loadRewardedVideoAd
            '+hasAdAvailableForAdUnitID:':
                name: hasAdAvailable
            '+presentRewardedVideoAdForAdUnitID:fromViewController:':
                name: presentRewardedVideoAd
    MPRewardedVideoCustomEvent: # DONE
        methods:
            '-requestRewardedVideoWithCustomEventInfo:':
                name: requestRewardedVideo
            '-presentRewardedVideoFromViewController:':
                name: presentRewardedVideo
    MPRewardedVideoReward: # DONE
        methods:
            '-init.*':
                name: init
    MPServerAdPositioning: # DONE
        methods:
            '+positioning':
                property: true
    MPStaticNativeAdRenderer: # DONE
        methods:
            '+rendererConfigurationWithRendererSettings:':
                name: getRendererConfiguration
    MPStaticNativeAdRendererSettings: {} # DONE
    MPStaticNativeAdView: {} # DONE
    MPTableViewAdPlacer: # DONE
        methods:
            '-loadAds.*':
                name: loadAds
            '+placerWithTableView.*':
                name: create
                constructor: true
    MPVideoNativeAdView: {} # DONE
    
protocols:
    MPAdViewDelegate: # DONE
        methods:
            '-viewControllerForPresentingModalView':
                property: true
            '-adViewDidLoadAd:':
                name: didLoadAd
            '-adViewDidFailToLoadAd:':
                name: didFailToLoadAd
            '-willPresentModalViewForAd:':
                name: willPresentModalView
            '-didDismissModalViewForAd:':
                name: didDismissModalView
            '-willLeaveApplicationFromAd:':
                name: willLeaveApplication
    MPBannerCustomEventDelegate: # DONE
        methods:
            '-viewControllerForPresentingModalView':
                property: true
            '-location':
                property: true
            '-bannerCustomEvent:didLoadAd:':
                name: didLoadAd
            '-bannerCustomEvent:didFailToLoadAdWithError:':
                name: didFailToLoadAd
            '-bannerCustomEventWillBeginAction:':
                name: willBeginAction
            '-bannerCustomEventDidFinishAction:':
                name: didFinishAction
            '-bannerCustomEventWillLeaveApplication:':
                name: willLeaveApplication
    MPCollectionViewAdPlacerDelegate: # DONE
        methods:
            '-nativeAdWillPresentModalForCollectionViewAdPlacer:':
                name: willPresentModal
            '-nativeAdDidDismissModalForCollectionViewAdPlacer:':
                name: didDismissModal
            '-nativeAdWillLeaveApplicationFromCollectionViewAdPlacer:':
                name: willLeaveApplication
    MPInterstitialAdControllerDelegate: # DONE
        methods:
            '-interstitialDidLoadAd:':
                name: didLoadAd
            '-interstitialDidFailToLoadAd:':
                name: didFailToLoadAd
            '-interstitialWillAppear:':
                name: willAppear
            '-interstitialDidAppear:':
                name: didAppear
            '-interstitialWillDisappear:':
                name: willDisappear
            '-interstitialDidDisappear:':
                name: didDisappear
            '-interstitialDidExpire:':
                name: didExpire
            '-interstitialDidReceiveTapEvent:':
                name: didReceiveTapEvent
    MPInterstitialCustomEventDelegate: # DONE
        methods:
            '-location':
                property: true
            '-interstitialCustomEvent:didLoadAd:':
                name: didLoadAd
            '-interstitialCustomEvent:didFailToLoadAdWithError:':
                name: didFailToLoadAd
            '-interstitialCustomEventDidExpire:':
                name: didExpire
            '-interstitialCustomEventWillAppear:':
                name: willAppear
            '-interstitialCustomEventDidAppear:':
                name: didAppear
            '-interstitialCustomEventWillDisappear:':
                name: willDisappear
            '-interstitialCustomEventDidDisappear:':
                name: didDisappear
            '-interstitialCustomEventDidReceiveTapEvent:':
                name: didReceiveTapEvent
            '-interstitialCustomEventWillLeaveApplication:':
                name: willLeaveApplication
    MPMediationSettingsProtocol: # DONE
        skip_adapter: true
    MPNativeAdAdapterDelegate: # DONE
        methods:
            '-viewControllerForPresentingModalView':
                property: true
            '-nativeAdWillPresentModalForAdapter:':
                name: willPresentModal
            '-nativeAdDidDismissModalForAdapter:':
                name: didDismissModal
            '-nativeAdWillLeaveApplicationFromAdapter:':
                name: willLeaveApplication
            '-nativeAdWillLogImpression:':
                name: willLogImpression
            '-nativeAdDidClick:':
                name: didClick
    MPNativeAdAdapter: # DONE
        skip_adapter: true
        properties:
            'properties':
                type: NSDictionary<?, ?> # MPNativeAdProperties ???
        methods:
            '-displayContentForURL:rootViewController:':
                name: displayContent
            '-willAttachToView:':
                trim_after_first_colon: true
            '-privacyInformationIconView':
                property: true
            '-mainMediaView':
                property: true
    MPNativeAdDelegate: # DONE
        methods:
            '-willPresentModalForNativeAd:':
                name: willPresentModal
            '-didDismissModalForNativeAd:':
                name: didDismissModal
            '-willLeaveApplicationFromNativeAd:':
                name: willLeaveApplication
            '-viewControllerForPresentingModalView':
                property: true
    MPNativeAdRenderer: # DONE
        skip_adapter: true
        methods:
            '-initWithRendererSettings:':
                exclude: true
            '-retrieveViewWithAdapter:error:':
                name: retrieveView
            '-adViewWillMoveToSuperview:':
                name: willMoveToSuperview
    MPNativeAdRendererSettings: # DONE
        skip_adapter: true
    MPNativeAdRendering: # DONE
        skip_adapter: true
        methods:
            '-layoutStarRating:':
                trim_after_first_colon: true
            '-layoutCustomAssetsWithProperties:imageLoader:':
                name: layoutCustomAssets
            '-.*':
                property: true
            '+nibForAd':
                property: true
    MPNativeCustomEventDelegate: # DONE
        methods:
            '-nativeCustomEvent:didLoadAd:':
                name: didLoadAd
            '-nativeCustomEvent:didFailToLoadAdWithError:':
                name: didFailToLoadAd
    MPRewardedVideoDelegate: # DONE
        methods:
            '-rewardedVideoAdDidLoadForAdUnitID:':
                name: didLoad
            '-rewardedVideoAdDidFailToLoadForAdUnitID:error:':
                name: didFailToLoadAd
            '-rewardedVideoAdDidExpireForAdUnitID:':
                name: didExpire
            '-rewardedVideoAdDidFailToPlayForAdUnitID:error:':
                name: didFailToPlayAd
            '-rewardedVideoAdWillAppearForAdUnitID:':
                name: willAppear
            '-rewardedVideoAdDidAppearForAdUnitID:':
                name: didAppear
            '-rewardedVideoAdWillDisappearForAdUnitID:':
                name: willDisappear
            '-rewardedVideoAdDidDisappearForAdUnitID:':
                name: didDisappear
            '-rewardedVideoAdDidReceiveTapEventForAdUnitID:':
                name: didReceiveTapEvent
            '-rewardedVideoAdWillLeaveApplicationForAdUnitID:':
                name: willLeaveApplication
            '-rewardedVideoAdShouldRewardForAdUnitID:reward:':
                name: shouldReward
    MPRewardedVideoCustomEventDelegate: # DONE
        methods:
            '-instanceMediationSettingsForClass:':
                name: getMediationSettings
            '-rewardedVideoDidLoadAdForCustomEvent:':
                name: didLoadAd
            '-rewardedVideoDidFailToLoadAdForCustomEvent:error:':
                name: didFailToLoadAd
            '-rewardedVideoDidExpireForCustomEvent:':
                name: didExpire
            '-rewardedVideoDidFailToPlayForCustomEvent:error:':
                name: didFailToPlay
            '-rewardedVideoWillAppearForCustomEvent:':
                name: willAppear
            '-rewardedVideoDidAppearForCustomEvent:':
                name: didAppear
            '-rewardedVideoWillDisappearForCustomEvent:':
                name: willDisappear
            '-rewardedVideoDidDisappearForCustomEvent:':
                name: didDisappear
            '-rewardedVideoWillLeaveApplicationForCustomEvent:':
                name: willLeaveApplication
            '-rewardedVideoDidReceiveTapEventForCustomEvent:':
                name: didReceiveTapEvent
            '-rewardedVideoShouldRewardUserForCustomEvent:reward:':
                name: shouldRewardUser
    MPTableViewAdPlacerDelegate: # DONE
        methods:
            '-nativeAdWillPresentModalForTableViewAdPlacer:':
                name: willPresentModal
            '-nativeAdDidDismissModalForTableViewAdPlacer:':
                name: didDismissModal
            '-nativeAdWillLeaveApplicationFromTableViewAdPlacer:':
                name: willLeaveApplication

functions:
    # Make sure we don't miss any functions if new ones are introduced in a later version
    (k?MP.*):
        class: MoPubKit
        name: 'Function__#{g[0]}'

values:
    MoPubNativeAdsSDKDomain:
        class: MPNativeAdError
        name: getClassDomain

    k(AdTitle|AdText|AdIconImage|AdMainImage|AdCTAText|AdStarRating|VideoConfig|VASTVideo|NativeVideoAdConfig|AdDAAIconImage|ImpressionTrackerURLs|DefaultActionURL|ClickTrackerURL|LogEventRequestProperties)Key:
        dictionary: MPNativeAdProperties
        name: '#{g[0]}'
        type: NSString
    k(DAAIconImageName|DAAIconTapDestinationURL):
        dictionary: MPNativeAdProperties
        name: '#{g[0]}'
        type: NSString

    # Make sure we don't miss any values if new ones are introduced in a later version
    (k?MP.*):
        class: MoPubKit
        name: 'Value__#{g[0]}'

constants:
    # Make sure we don't miss any constants if new ones are introduced in a later version
    (k?MP.*):
        class: MoPubKit
        name: 'Constant__#{g[0]}'
