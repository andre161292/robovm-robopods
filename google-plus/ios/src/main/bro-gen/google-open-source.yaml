package: org.robovm.pods.google.opensource
framework: GoogleOpenSource
include: 
    - ../../../../../../robovm/cocoatouch/src/main/bro-gen/foundation.yaml
    - ../../../../../../robovm/cocoatouch/src/main/bro-gen/uikit.yaml
    - ../../../../../../robovm/cocoatouch/src/main/bro-gen/coregraphics.yaml
clang_args: ['-x', 'objective-c']
header_root: /../robopods/META-INF/robovm/ios/libs
headers:
    - GoogleOpenSource.framework/Headers/GoogleOpenSource.h
typedefs:
    GTLServiceCompletionHandler: '@Block GTLServiceCompletionHandler'
    GTLServiceUploadProgressBlock: '@Block GTLServiceUploadProgressHandler'
    GTLServiceRetryBlock: '@Block GTLServiceRetryCallback'
    
enums:
    OpenInChromePreference: {first: kOpenInChromeNone}
    GTMHTTPFetcherCookieStorageMethod: {first: kGTMHTTPFetcherCookieStorageMethodStatic}
        
classes:
#    GTLBatchQuery: {}
#    GTLBatchResult: {}
    GTLDateTime: # DONE
        methods:
            '+dateTime.*':
                name: create
                constructor: true
                parameters:
                    str:
                        name: rfc3339
#    GTLErrorObject: {}
#    GTLErrorObjectData: {}
#    GTLJSONParser: {}
    GTLObject:
        methods:
            '-copyWithZone:':
                name: copy
            '-JSONString':
                property: true
            '-setJSONValue:forKey:':
                name: setJSONValue0
                visibility: private
            '-JSONValueForKey:':
                name: getJSONValue
            '-additionalJSONKeys':
                property: true
                return_type: List<String>
                marshaler: NSArray.AsStringListMarshaler
            '-additionalPropertyForName:':
                name: getAdditionalProperty
            '-setAdditionalProperty:forName:':
                name: setAdditionalProperty0
                visibility: private
            '-additionalProperties':
                property: true
            '-setProperty:forKey:':
                name: setProperty0
                visibility: private
            '-propertyForKey:':
                name: getProperty
            '-setUserData:':
                trim_after_first_colon: true
            '-userData':
                property: true
            '-fieldsDescription':
                property: true
            '-patchObjectFromOriginal:':
                name: getPatchObject
            '+object':
                exclude: true
            '+objectWithJSON:':
                name: create
                constructor: true
            '+nullValue':
                property: true
            '+.*':
                exclude: true
    GTLCollectionObject: # DONE
        methods:
            '-itemAtIndex:':
                name: get
            '-objectAtIndexedSubscript:':
                exclude: true
            '-itemForIdentifier:':
                name: getItem
            '-items':
                property: true
#    GTLResultArray: {}
#    GTLPlusAcl: {}
#    GTLPlusAclentryResource: {}
#    GTLPlusActivity: {}
#    GTLPlusActivityActor: {}
#    GTLPlusActivityObject: {}
#    GTLPlusActivityProvider: {}
#    GTLPlusActivityActorImage: {}
#    GTLPlusActivityActorName: {}
#    GTLPlusActivityObjectActor: {}
#    GTLPlusActivityObjectAttachmentsItem: {}
#    GTLPlusActivityObjectPlusoners: {}
#    GTLPlusActivityObjectReplies: {}
#    GTLPlusActivityObjectResharers: {}
#    GTLPlusActivityObjectActorImage: {}
#    GTLPlusActivityObjectAttachmentsItemEmbed: {}
#    GTLPlusActivityObjectAttachmentsItemFullImage: {}
#    GTLPlusActivityObjectAttachmentsItemImage: {}
#    GTLPlusActivityObjectAttachmentsItemThumbnailsItem: {}
#    GTLPlusActivityObjectAttachmentsItemThumbnailsItemImage: {}
#    GTLPlusActivityFeed: {}
#    GTLPlusComment: {}
#    GTLPlusCommentActor: {}
#    GTLPlusCommentInReplyToItem: {}
#    GTLPlusCommentObject: {}
#    GTLPlusCommentPlusoners: {}
#    GTLPlusCommentActorImage: {}
#    GTLPlusCommentFeed: {}
    GTLPlusItemScope: # DONE
        properties:
            'additionalName':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
            '(associatedMedia|attendees|author|contributor|performers)':
                type: NSArray<GTLPlusItemScope>
    GTLPlusMoment: {} # DONE
    GTLPlusMomentsFeed: {} # DONE
    GTLPlusPeopleFeed: {} # DONE
    GTLPlusPerson: # DONE
        properties:
            'emails':
                type: NSArray<GTLPlusPersonEmailsItem>
            'isPlusUser':
                visibility: private # boolean
            'organizations':
                type: NSArray<GTLPlusPersonOrganizationsItem>
            'placesLived':
                type: NSArray<GTLPlusPersonPlacesLivedItem>
            'urls':
                type: NSArray<GTLPlusPersonUrlsItem>
    GTLPlusPersonAgeRange: {} # DONE
    GTLPlusPersonCover: {} # DONE
    GTLPlusPersonEmailsItem: {} # DONE
    GTLPlusPersonImage: {} # DONE
    GTLPlusPersonName: {} # DONE
    GTLPlusPersonOrganizationsItem: # DONE
        properties:
            'primary':
                visibility: private # boolean
    GTLPlusPersonPlacesLivedItem: # DONE
        properties:
            'primary':
                visibility: private # boolean
    GTLPlusPersonUrlsItem: {} # DONE
    GTLPlusPersonCoverCoverInfo: {} # DONE
    GTLPlusPersonCoverCoverPhoto: {} # DONE
    GTLPlusPlace: {} # DONE
    GTLPlusPlaceAddress: {} # DONE
    GTLPlusPlacePosition: {} # DONE
    GTLQuery: # DONE
        properties:
            'expectedObjectClass':
                type: 'Class<? extends GTLObject>'
            'completionBlock':
                name: completionHandler
                type: '@Block VoidBlock3<GTLServiceTicket, GTLObject, NSError>'
        methods:
            '-initWithMethodName:':
                name: init
            '-setCustomParameter:forKey:':
                name: setCustomParameter0
                visibility: private
            '+queryWithMethodName:':
                exclude: true
            '+nextRequestID':
                property: true
            '+parameterNameMap':
                property: true
            '+arrayPropertyToClassMap':
                property: true
    GTLQueryCollectionImpl: {} # DONE
    GTLQueryPlus: # DONE
        methods:
            '+queryForActivitiesGetWithActivityId:':
                name: getActivities
                return_type: GTLQueryPlus
            '+queryForActivitiesListWithUserId:collection:':
                name: listActivities
                return_type: GTLQueryPlus
            '+queryForActivitiesSearchWithQuery:':
                name: searchActivities
                return_type: GTLQueryPlus
            '+queryForCommentsGetWithCommentId:':
                name: getComments
                return_type: GTLQueryPlus
            '+queryForCommentsListWithActivityId:':
                name: listComments
                return_type: GTLQueryPlus
            '+queryForMomentsInsertWithObject:userId:collection:':
                name: insertMoments
                return_type: GTLQueryPlus
            '+queryForMomentsListWithUserId:collection:':
                name: listMoments
                return_type: GTLQueryPlus
            '+queryForMomentsRemoveWithIdentifier:':
                name: removeMoments
                return_type: GTLQueryPlus
            '+queryForPeopleGetWithUserId:':
                name: getPeople
                return_type: GTLQueryPlus
            '+queryForPeopleListWithUserId:collection:':
                name: listPeople
                return_type: GTLQueryPlus
            '+queryForPeopleListByActivityWithActivityId:collection:':
                name: listPeopleByActivity
                return_type: GTLQueryPlus
            '+queryForPeopleSearchWithQuery:':
                name: searchPeople
                return_type: GTLQueryPlus
    GTLService: # DONE
        properties:
            'runLoopModes':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
            'allowInsecureQueries':
                name: allowsInsecureQueries
            'isRESTDataWrapperRequired':
                name: RESTDataWrapperRequired
        methods:
            '-executeQuery.*':
                trim_after_first_colon: true
            '-fetchObjectByInsertingObject.*':
                name: fetchObjectByInserting
                return_type: '<T extends GTLObject> GTLServiceTicket'
                parameters:
                    objectClass:
                        type: 'Class<T>'
            '-fetchObjectByUpdatingObject.*':
                name: fetchObjectByUpdating
                return_type: '<T extends GTLObject> GTLServiceTicket'
                parameters:
                    objectClass:
                        type: 'Class<T>'
            '-fetchObject.*':
                name: fetchObject
                return_type: '<T extends GTLObject> GTLServiceTicket'
                parameters:
                    objectClass:
                        type: 'Class<T>'
            '-fetchPublicObjectWithURL:objectClass:delegate:didFinishSelector:':
                name: fetchPublicObject
                return_type: '<T extends GTLObject> GTLServiceTicket'
                parameters:
                    objectClass:
                        type: 'Class<T>'
            '-deleteResourceURL.*':
                trim_after_first_colon: true
            '-setServiceProperty:forKey:':
                name: setServiceProperty0
                visibility: private
            '-servicePropertyForKey:':
                name: getServiceProperty
            '-requestForURL:ETag:httpMethod:':
                name: getRequest
            '-objectRequestForURL:object:ETag:httpMethod:isREST:additionalHeaders:ticket:':
                name: getObjectRequest
            '-waitForTicket:timeout:fetchedObject:error:':
                trim_after_first_colon: true
                visibility: protected # out parameter
            '+defaultServiceUploadChunkSize':
                property: true
    GTLServiceTicket: # DONE
        methods:
            '-initWithService:':
                name: init
            '-service':
                property: true
                return_type: GTLService
            '-setProperty:forKey:':
                name: setProperty0
                visibility: private
            '-propertyForKey:':
                name: getProperty
            '-queryForRequestID:':
                name: getQuery
            '+ticketForService:':
                exclude: true
    GTLServicePlus: {} # DONE
    GTLUploadParameters: # DONE
        methods:
            '+uploadParametersWith.*':
                name: create
                constructor: true
#    GTLUtilities: {}
#    GTMBridgeFetcher: {}
    GTMHTTPFetcher:
        properties:
            '.*': { exclude: true }
        methods:
            '.*': { exclude: true }
    GTMHTTPFetcherService:
        properties:
            '.*': { exclude: true }
        methods:
            '.*': { exclude: true }
#    GTMHTTPFetchHistory: {}
#    GTMCachedURLResponse: {}
#    GTMURLCache: {}
#    GTMCookieStorage: {}
#    GTMHTTPUploadFetcher: {}
    GTMOAuth2Authentication:
        properties:
            '.*': { exclude: true }
        methods:
            '.*': { exclude: true }
#    GTMOAuth2SignIn: {}
#    GTMOAuth2ViewControllerTouch: {}
#    GTMOAuth2Keychain: {}
    OpenInChromeController: # DONE
        methods:
            '-openInChrome.*':
                trim_after_first_colon: true
            '-openInChromePreference':
                property: true
            '+sharedInstance':
                property: true

protocols:
    GTLCollectionProtocol: {} # DONE
    GTLBatchItemCreationProtocol: # DONE
        methods:
            '-createItemsWithClassMap:':
                name: createItems
    GTLQueryProtocol: # DONE
        methods:
            '-executionDidStop':
                name: didStopExecution
            '-(additionalHTTPHeaders|urlQueryParameters|uploadParameters)':
                property: true
    GTLQueryCollectionProtocol: # DONE
        skip_adapter: true
#    GTMCookieStorageProtocol: {}
#    GTMHTTPFetchHistoryProtocol: {}
#    GTMHTTPFetcherServiceProtocol: {}
    GTMFetcherAuthorizationProtocol:
        properties:
            '.*': { exclude: true }
        methods:
            '.*': { exclude: true }


functions:
    # GTLBase64
    GTL(.*)Base64:
        class: GTLBase64
        name: '#{g[0]}'

    GTLFrameworkVersion.*:
        exclude: true

    # Make sure we don't miss any functions if new ones are introduced in a later version
 #   (k?GTL.*):
 #       class: GoogleOpenSource
 #       name: 'Function__#{g[0]}'
 #   (k?GTM.*):
 #       class: GoogleOpenSource
 #       name: 'Function__#{g[0]}'

values:

    # Make sure we don't miss any values if new ones are introduced in a later version
 #   (k?GTL.*):
 #       class: GoogleOpenSource
 #       name: 'Value__#{g[0]}'
 #   (k?GTM.*):
 #       class: GoogleOpenSource
 #       name: 'Value__#{g[0]}'

constants:
    # Make sure we don't miss any constants if new ones are introduced in a later version
 #   (k?GTL.*):
 #       class: GoogleOpenSource
 #       name: 'Constant__#{g[0]}'
 #   (k?GTM.*):
 #       class: GoogleOpenSource
 #       name: 'Constant__#{g[0]}'
